function Decoder(bytes, port) {
  // Decode an uplink message from a buffer
  // (array) of bytes to an object of fields.
  var decoded = {};

  // if (port === 1) decoded.led = bytes[0];

  return decoded;
}function Decoder(bytes, port) {
  // Decode an uplink message from a buffer
  // (array) of bytes to an object of fields.
  //var decoded = {};

  // if (port === 1) decoded.led = bytes[0];

  //return decoded;
  
  var result={};
  
  if (bytes[0]<=0xF){
    result="0"+bytes[0].toString(16);
  } else
  {
    result=bytes[0].toString(16);
  }
  
  if (bytes[1]<=0xF){
    result+="0"+bytes[1].toString(16);
  } else
  {
    result+=bytes[1].toString(16)
  }
  
  
  if (bytes[2]<=0xF){
    result+="0"+bytes[2].toString(16);
  } else
  {
    result+=bytes[2].toString(16)
  }
  
  if (bytes[3]<=0xF){
    result+="0"+bytes[3].toString(16);
  } else
  {
    result+=bytes[3].toString(16)
  }
  
  if (bytes[4]<=0xF){
    result+="0"+bytes[4].toString(16);
  } else
  {
    result+=bytes[4].toString(16)
  }
  
  if (bytes[5]<=0xF){
    result+="0"+bytes[5].toString(16);
  } else
  {
    result+=bytes[5].toString(16)
  }
  
  if (bytes[6]<=0xF){
    result+="0"+bytes[6].toString(16);
  } else
  {
    result+=bytes[6].toString(16)
  }
  
  if (bytes[7]<=0xF){
    result+="0"+bytes[7].toString(16);
  } else
  {
    result+=bytes[7].toString(16)
  }
  
  if (bytes[8]<=0xF){
    result+="0"+bytes[8].toString(16);
  } else
  {
    result+=bytes[8].toString(16)
  }
  
  if (bytes[9]<=0xF){
    result+="0"+bytes[9].toString(16);
  } else
  {
    result+=bytes[9].toString(16)
  }
  
  
  return {
    adeunis_raw:result
  }
  
  
}